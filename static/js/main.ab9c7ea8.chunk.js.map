{"version":3,"sources":["Handwriting_Recognization/Handwriting_Recognization.jsx","components/Button.jsx","Handwriting_Recognization/data.js","App.js","serviceWorker.js","index.js"],"names":["model","data","canvas","STYLES","SIZES","Button","children","type","onClick","buttonStyle","buttonSize","checkButtonStyle","includes","checkButtonSize","className","MnistData","this","shuffledTrainIndex","shuffledTestIndex","img","Image","document","createElement","ctx","getContext","imgRequest","Promise","resolve","reject","crossOrigin","onload","width","naturalWidth","height","naturalHeight","datasetBytesBuffer","ArrayBuffer","NUM_DATASET_ELEMENTS","i","datasetBytesView","Float32Array","IMAGE_SIZE","drawImage","imageData","getImageData","j","length","datasetImages","src","labelsRequest","fetch","all","labelsResponse","Uint8Array","arrayBuffer","datasetLabels","trainIndices","tf","createShuffledIndices","testIndices","trainImages","slice","testImages","trainLabels","NUM_CLASSES","testLabels","batchSize","nextBatch","index","batchImagesArray","batchLabelsArray","idx","image","set","label","xs","labels","Handwriting_Recognization","state","trainingComplete","series","name","options","chart","plotOptions","bar","dataLabels","position","enabled","formatter","val","offsetY","style","fontSize","colors","xaxis","categories","axisBorder","show","axisTicks","crosshairs","fill","gradient","colorFrom","colorTo","stops","opacityFrom","opacityTo","tooltip","yaxis","title","floating","align","color","fabric","Canvas","backgroundColor","isDrawingMode","freeDrawingBrush","createModel","load","train","console","log","add","conv2d","inputShape","kernelSize","filters","strides","activation","kernelInitializer","maxPooling2d","poolSize","flatten","dense","units","compile","optimizer","sgd","loss","batch","nextTrainBatch","reshape","fit","epochs","setState","canvasElement","getElement","tensor","fromPixels","resizeNearestNeighbor","mean","expandDims","toFloat","predict","out","dataSync","N","Array","n","Math","round","clear","setBackgroundColor","loading_predict","instruction","a","id","clearCanvas","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab9c7ea8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Handwriting_Recognization.css\";\nimport { Button } from \"../components/Button.jsx\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport { MnistData } from \"./data\";\nimport { Icon } from \"@iconify/react\";\nimport tensorflowIcon from \"@iconify/icons-logos/tensorflow\";\nimport { fabric } from \"fabric\";\nimport Chart from \"react-apexcharts\";\n\n///////////Global Variables///////////\nlet model;\nlet data;\nlet canvas;\n\n//traning constants\nconst BATCH_SIZE = 64;\nconst TRAIN_BATCHES = 150;\n\nexport default class Handwriting_Recognization extends Component {\n  //initiate the bar graph\n  constructor() {\n    super();\n    this.state = {\n      trainingComplete: false,\n      series: [\n        {\n          name: \"Probability\",\n          data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        },\n      ],\n      options: {\n        chart: {\n          height: 350,\n          type: \"bar\",\n        },\n        plotOptions: {\n          bar: {\n            dataLabels: {\n              position: \"top\", // top, center, bottom\n            },\n          },\n        },\n        dataLabels: {\n          enabled: true,\n          formatter: function (val) {\n            return val + \"%\";\n          },\n          position: \"top\",\n          offsetY: -20,\n          style: {\n            fontSize: \"12px\",\n            colors: [\"#304758\"],\n          },\n        },\n\n        xaxis: {\n          categories: [\n            \"Zero\",\n            \"One\",\n            \"Two\",\n            \"Three\",\n            \"Four\",\n            \"Five\",\n            \"Six\",\n            \"Seven\",\n            \"Eight\",\n            \"Nine\",\n          ],\n          position: \"buttom\",\n          axisBorder: {\n            show: true,\n          },\n          axisTicks: {\n            show: false,\n          },\n          crosshairs: {\n            fill: {\n              type: \"gradient\",\n              gradient: {\n                colorFrom: \"#D8E3F0\",\n                colorTo: \"#BED1E6\",\n                stops: [0, 100],\n                opacityFrom: 0.4,\n                opacityTo: 0.5,\n              },\n            },\n          },\n          tooltip: {\n            enabled: true,\n          },\n        },\n\n        yaxis: {\n          axisBorder: {\n            show: true,\n          },\n          axisTicks: {\n            show: false,\n          },\n          labels: {\n            show: false,\n            formatter: function (val) {\n              return val + \"%\";\n            },\n          },\n        },\n\n        title: {\n          //text: \"Monthly Inflation in Argentina, 2002\",\n          floating: true,\n          offsetY: 330,\n          align: \"center\",\n          style: {\n            color: \"#000000\",\n          },\n        },\n      },\n    };\n  }\n\n  //create the canvas and train the ML model\n  async componentDidMount() {\n    canvas = new fabric.Canvas(\"canvas\", {\n      backgroundColor: \"rgb(0, 0, 0)\",\n    });\n    canvas.isDrawingMode = true;\n    canvas.freeDrawingBrush.width = 11;\n    canvas.freeDrawingBrush.color = \"rgb(255, 255, 255)\";\n\n    this.createModel();\n    await this.load();\n    await this.train();\n  }\n\n  createModel() {\n    console.log(\"Create model\");\n    model = tf.sequential();\n    console.log(\"Model created\");\n\n    console.log(\"Add layers\");\n    model.add(\n      tf.layers.conv2d({\n        inputShape: [28, 28, 1],\n        kernelSize: 5,\n        filters: 8,\n        strides: 1,\n        activation: \"relu\",\n        kernelInitializer: \"VarianceScaling\",\n      })\n    );\n\n    model.add(\n      tf.layers.maxPooling2d({\n        poolSize: [2, 2],\n        strides: [2, 2],\n      })\n    );\n\n    model.add(\n      tf.layers.conv2d({\n        kernelSize: 5,\n        filters: 16,\n        strides: 1,\n        activation: \"relu\",\n        kernelInitializer: \"VarianceScaling\",\n      })\n    );\n\n    model.add(\n      tf.layers.maxPooling2d({\n        poolSize: [2, 2],\n        strides: [2, 2],\n      })\n    );\n\n    model.add(tf.layers.flatten());\n\n    model.add(\n      tf.layers.dense({\n        units: 10,\n        kernelInitializer: \"VarianceScaling\",\n        activation: \"softmax\",\n      })\n    );\n\n    console.log(\"Layers created\");\n\n    console.log(\"Start compiling ...\");\n\n    model.compile({\n      optimizer: tf.train.sgd(0.15),\n      loss: \"categoricalCrossentropy\",\n    });\n\n    console.log(\"Compiled\");\n  }\n\n  async load() {\n    console.log(\"Loading MNIST data ...\");\n    data = new MnistData();\n    await data.load();\n    console.log(\"Data loaded successfully\");\n  }\n\n  async train() {\n    console.log(\"Start training ...\");\n    for (let i = 0; i < TRAIN_BATCHES; i++) {\n      //tidy function ensures no memory leak on the client's side\n      const batch = tf.tidy(() => {\n        const batch = data.nextTrainBatch(BATCH_SIZE);\n        batch.xs = batch.xs.reshape([BATCH_SIZE, 28, 28, 1]);\n        return batch;\n      });\n\n      await model.fit(batch.xs, batch.labels, {\n        batchSize: BATCH_SIZE,\n        epochs: 1,\n      });\n\n      tf.dispose(batch);\n\n      await tf.nextFrame();\n    }\n    this.setState({ trainingComplete: true });\n    console.log(\"Training complete\");\n  }\n\n  async predict() {\n    let canvasElement = canvas.getElement();\n\n    let tensor = tf.browser\n      .fromPixels(canvasElement)\n      .resizeNearestNeighbor([28, 28])\n      .mean(2)\n      .expandDims(2)\n      .expandDims()\n      .toFloat();\n\n    let out = await model.predict(tensor);\n    out = out.dataSync();\n    console.log(out);\n\n    let N = new Array(10);\n    //round decimal and convert to percentage\n    for (let i = 0; i < 10; i++) {\n      out[i] *= 100;\n      let n = Math.round(out[i] * 100);\n      N[i] = n / 100;\n    }\n\n    this.setState({\n      series: [\n        {\n          name: \"Probability\",\n          data: N,\n        },\n      ],\n    });\n    console.log(out);\n  }\n\n  clearCanvas() {\n    canvas.clear();\n    canvas.setBackgroundColor(\"rgb(0, 0, 0)\");\n    this.setState({\n      series: [\n        {\n          name: \"Probability\",\n          data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        },\n      ],\n    });\n  }\n\n  render() {\n    let loading_predict;\n    if (!this.state.trainingComplete) {\n      //three dot thing\n      loading_predict = (\n        <div className=\"loading\">\n          <div className=\"spinner\">\n            <div className=\"bounce1\"></div>\n            <div className=\"bounce2\"></div>\n            <div className=\"bounce3\"></div>\n          </div>\n        </div>\n      );\n    } else {\n      loading_predict = (\n        <Button\n          className=\"loading\"\n          onClick={async () => await this.predict()}\n          type=\"button\"\n          buttonStyle=\"btn--success--outline\"\n          buttonSize=\"btn--medium\"\n        >\n          Predict Handwriting\n        </Button>\n      );\n    }\n    let instruction;\n    if (!this.state.trainingComplete) {\n      instruction = (\n        <p>\n          Please wait for the ML model training to complete, and then write any\n          digit on the canvas then click \"Predict Handwritting\"\n        </p>\n      );\n    }\n    return (\n      <>\n        <div className=\"container1\">\n          <canvas\n            className=\"drawingCanvas\"\n            id=\"canvas\"\n            width=\"300\"\n            height=\"300\"\n          ></canvas>\n          <Chart\n            className=\"chart\"\n            options={this.state.options}\n            series={this.state.series}\n            type=\"bar\"\n            width=\"500\"\n          />\n        </div>\n        <div className=\"container2\">\n          <Button\n            className=\"but\"\n            onClick={() => this.clearCanvas()}\n            type=\"button\"\n            buttonStyle=\"btn--primary--outline\"\n            buttonSize=\"btn--medium\"\n          >\n            Clear\n          </Button>\n          {loading_predict}\n        </div>\n        {instruction}\n      </>\n    );\n  }\n}\n// <Icon className=\"icon\" icon={tensorflowIcon} />\n","import React from \"react\";\nimport \"./button.css\";\n\nconst STYLES = [\n  \"btn--primary--solid\",\n  \"btn--warning--solid\",\n  \"btn--danger--solid\",\n  \"btn--success--solid\",\n  \"btn--primary--outline\",\n  \"btn--warning--outline\",\n  \"btn--danger--outline\",\n  \"btn--success--outline\"\n];\n\nconst SIZES = [\"btn--medium\", \"btn--large\"];\n\nexport const Button = ({\n  children,\n  type,\n  onClick,\n  buttonStyle,\n  buttonSize\n}) => {\n  const checkButtonStyle = STYLES.includes(buttonStyle)\n    ? buttonStyle\n    : STYLES[0];\n\n  const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0];\n\n  return (\n    <button\n      className={`btn ${checkButtonStyle} ${checkButtonSize}`}\n      onClick={onClick}\n      type={type}\n    >\n      {children}\n    </button>\n  );\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from \"@tensorflow/tfjs\";\n\nconst IMAGE_SIZE = 784;\nconst NUM_CLASSES = 10;\nconst NUM_DATASET_ELEMENTS = 65000;\n\nconst NUM_TRAIN_ELEMENTS = 55000;\nconst NUM_TEST_ELEMENTS = NUM_DATASET_ELEMENTS - NUM_TRAIN_ELEMENTS;\n\nconst MNIST_IMAGES_SPRITE_PATH =\n  \"https://storage.googleapis.com/learnjs-data/model-builder/mnist_images.png\";\nconst MNIST_LABELS_PATH =\n  \"https://storage.googleapis.com/learnjs-data/model-builder/mnist_labels_uint8\";\n\n/**\n * A class that fetches the sprited MNIST dataset and returns shuffled batches.\n *\n * NOTE: This will get much easier. For now, we do data fetching and\n * manipulation manually.\n */\nexport class MnistData {\n  constructor() {\n    this.shuffledTrainIndex = 0;\n    this.shuffledTestIndex = 0;\n  }\n\n  async load() {\n    // Make a request for the MNIST sprited image.\n    const img = new Image();\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const imgRequest = new Promise((resolve, reject) => {\n      img.crossOrigin = \"\";\n      img.onload = () => {\n        img.width = img.naturalWidth;\n        img.height = img.naturalHeight;\n\n        const datasetBytesBuffer = new ArrayBuffer(\n          NUM_DATASET_ELEMENTS * IMAGE_SIZE * 4\n        );\n\n        const chunkSize = 5000;\n        canvas.width = img.width;\n        canvas.height = chunkSize;\n\n        for (let i = 0; i < NUM_DATASET_ELEMENTS / chunkSize; i++) {\n          const datasetBytesView = new Float32Array(\n            datasetBytesBuffer,\n            i * IMAGE_SIZE * chunkSize * 4,\n            IMAGE_SIZE * chunkSize\n          );\n          ctx.drawImage(\n            img,\n            0,\n            i * chunkSize,\n            img.width,\n            chunkSize,\n            0,\n            0,\n            img.width,\n            chunkSize\n          );\n\n          const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n          for (let j = 0; j < imageData.data.length / 4; j++) {\n            // All channels hold an equal value since the image is grayscale, so\n            // just read the red channel.\n            datasetBytesView[j] = imageData.data[j * 4] / 255;\n          }\n        }\n        this.datasetImages = new Float32Array(datasetBytesBuffer);\n\n        resolve();\n      };\n      img.src = MNIST_IMAGES_SPRITE_PATH;\n    });\n\n    const labelsRequest = fetch(MNIST_LABELS_PATH);\n    const [imgResponse, labelsResponse] = await Promise.all([\n      imgRequest,\n      labelsRequest,\n    ]);\n\n    this.datasetLabels = new Uint8Array(await labelsResponse.arrayBuffer());\n\n    // Create shuffled indices into the train/test set for when we select a\n    // random dataset element for training / validation.\n    this.trainIndices = tf.util.createShuffledIndices(NUM_TRAIN_ELEMENTS);\n    this.testIndices = tf.util.createShuffledIndices(NUM_TEST_ELEMENTS);\n\n    // Slice the the images and labels into train and test sets.\n    this.trainImages = this.datasetImages.slice(\n      0,\n      IMAGE_SIZE * NUM_TRAIN_ELEMENTS\n    );\n    this.testImages = this.datasetImages.slice(IMAGE_SIZE * NUM_TRAIN_ELEMENTS);\n    this.trainLabels = this.datasetLabels.slice(\n      0,\n      NUM_CLASSES * NUM_TRAIN_ELEMENTS\n    );\n    this.testLabels = this.datasetLabels.slice(\n      NUM_CLASSES * NUM_TRAIN_ELEMENTS\n    );\n  }\n\n  nextTrainBatch(batchSize) {\n    return this.nextBatch(\n      batchSize,\n      [this.trainImages, this.trainLabels],\n      () => {\n        this.shuffledTrainIndex =\n          (this.shuffledTrainIndex + 1) % this.trainIndices.length;\n        return this.trainIndices[this.shuffledTrainIndex];\n      }\n    );\n  }\n\n  nextTestBatch(batchSize) {\n    return this.nextBatch(batchSize, [this.testImages, this.testLabels], () => {\n      this.shuffledTestIndex =\n        (this.shuffledTestIndex + 1) % this.testIndices.length;\n      return this.testIndices[this.shuffledTestIndex];\n    });\n  }\n\n  nextBatch(batchSize, data, index) {\n    const batchImagesArray = new Float32Array(batchSize * IMAGE_SIZE);\n    const batchLabelsArray = new Uint8Array(batchSize * NUM_CLASSES);\n\n    for (let i = 0; i < batchSize; i++) {\n      const idx = index();\n\n      const image = data[0].slice(\n        idx * IMAGE_SIZE,\n        idx * IMAGE_SIZE + IMAGE_SIZE\n      );\n      batchImagesArray.set(image, i * IMAGE_SIZE);\n\n      const label = data[1].slice(\n        idx * NUM_CLASSES,\n        idx * NUM_CLASSES + NUM_CLASSES\n      );\n      batchLabelsArray.set(label, i * NUM_CLASSES);\n    }\n\n    const xs = tf.tensor2d(batchImagesArray, [batchSize, IMAGE_SIZE]);\n    const labels = tf.tensor2d(batchLabelsArray, [batchSize, NUM_CLASSES]);\n\n    return { xs, labels };\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Handwriting_Recognization from \"./Handwriting_Recognization/Handwriting_Recognization\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Handwriting_Recognization></Handwriting_Recognization>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}